import codecs
import secrets
from epkp.matrix import Encryptor, S_BOX, pad, unpad

INV_S_BOX = [S_BOX.index(byte) for byte in range(256)]


class Cracker:
    def __init__(self, pt1: bytes, ct1: bytes, pt2: bytes, ct2: bytes):
        matrix1 = [INV_S_BOX[a ^ b] for a, b in zip(pt1, ct1)]
        self.state = [INV_S_BOX[a ^ b] for a, b in zip(pt2, ct2)]
        matrix2 = [(self.state[i] + 255) % 256 for i in range(len(self.state))]

        self.transform = [matrix1.index(matrix2[i]) for i in range(len(matrix1))]

    def feed_one(self, next: bytes) -> bytearray:
        self.state = [
            (self.state[self.transform[i]] + 1) % 256
            for i in range(len(self.state))
        ]

        return bytearray(S_BOX[self.state[i]] ^ next[i] for i in range(len(self.state)))

    def feed(self, next: bytes) -> bytes:
        assert len(next) % len(self.state) == 0
        results: list[bytes] = []
        for i in range(0, len(next), len(self.state)):
            results.append(self.feed_one(next[i:i + len(self.state)]))
        return unpad(b"".join(results))


def test_cracker():
    key = secrets.token_bytes(32)
    encryptor = Encryptor(key)

    pt1 = b"Hello, world!"
    ct1 = encryptor.encrypt(pt1)

    pt2 = b"How do you do?"
    ct2 = encryptor.encrypt(pt2)

    pt3 = b"Next one"
    ct3 = encryptor.encrypt(pt3)

    cracker = Cracker(pad(pt1), ct1, pad(pt2), ct2)
    return cracker.feed(ct3) == pt3


def crack():
    cracker = Cracker(
        pad(b"Knock-knock!"),
        codecs.decode(b"311975bcb1d863fb6ea5527d2662caf9", "hex"),
        pad(b"Who's there?"),
        codecs.decode(b"2cc674ab9b473eaad953dfdb80b07e97", "hex")
    )

    # client → server
    print(cracker.feed(codecs.decode(b"caa878b2b4a714a392bcd22a9570ca602493b09e956a269700974640e2011237", "hex")))

    # server → client
    print(cracker.feed(codecs.decode(b"796ea20ef72428cfdf16c5698f2f4930", "hex")))

    # client → server
    print(cracker.feed(codecs.decode(b"8d4c72fe27c2b3f431f254585a49d09941525482b4dfc30c00d89cf168ffddbf2173b862e4bfd8c49063dafbed69a755d20edc063df287bbfbaa8b0b0121d0c058c7166123ac2d83ed828d399d7ace8ba2deaabe3360fddd0f476dbccf98f494bb98012cb7f9373215907c651e59a87c", "hex")))

    # server → client
    print(cracker.feed(codecs.decode(b"95c2a52f02836a383d46f1055efe01b9101173d2273f69ad3d623fd437a2e7423fa6be37aff2d9c4d04496a1937fdf70a22065c2c9ac004d40a28d62d320f70f", "hex")))

    # client → server
    print(cracker.feed(codecs.decode(b"e9bb94360a7fe309f46111ccd9c0e6a00fea7f0a3ec93e03b36200cf415c514cf89ea3153bd45b6df0415433db0f04f76d47834332a5fbc6185cb7b90e56391f", "hex")))


if __name__ == "__main__":
    assert test_cracker(), "Exploit test failed"
    crack()
