import secrets
from epkp.matrix import Encryptor, S_BOX, pad, unpad

INV_S_BOX = [S_BOX.index(byte) for byte in range(256)]


class Cracker:
    def __init__(self, pt1: bytes, ct1: bytes, pt2: bytes, ct2: bytes):
        matrix1 = [INV_S_BOX[a ^ b] for a, b in zip(pt1, ct1)]
        self.state = [INV_S_BOX[a ^ b] for a, b in zip(pt2, ct2)]
        matrix2 = [(self.state[i] + 255) % 256 for i in range(len(self.state))]

        self.transform = [matrix1.index(matrix2[i]) for i in range(len(matrix1))]

    def feed_one(self, next: bytes) -> bytearray:
        self.state = [
            (self.state[self.transform[i]] + 1) % 256
            for i in range(len(self.state))
        ]

        return bytearray(S_BOX[self.state[i]] ^ next[i] for i in range(len(self.state)))

    def feed(self, next: bytes) -> bytes:
        assert len(next) % len(self.state) == 0
        results: list[bytes] = []
        for i in range(0, len(next), len(self.state)):
            results.append(self.feed_one(next[i:i + len(self.state)]))
        return unpad(b"".join(results))


def test_cracker():
    key = secrets.token_bytes(32)
    encryptor = Encryptor(key)

    pt1 = b"Hello, world!"
    ct1 = encryptor.encrypt(pt1)

    pt2 = b"How do you do?"
    ct2 = encryptor.encrypt(pt2)

    pt3 = b"Next one"
    ct3 = encryptor.encrypt(pt3)

    cracker = Cracker(pad(pt1), ct1, pad(pt2), ct2)
    print(cracker.feed(ct3) == pt3)


if __name__ == "__main__":
    test_cracker()
